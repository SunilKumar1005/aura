{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\chat_bot\\\\src\\\\components\\\\ChatBubble\\\\ChatBubble.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './ChatBubble.css';\nimport botIcon from '../../assets/bot_icon.gif';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NUM_LINES = 8;\nconst POINTS_PER_LINE = 80;\nconst RADIUS = 36;\nconst COLORS = ['#00fff7', '#00c3ff', '#a259ff', '#ff3cac', '#ffb6ff', '#00f0ff', '#7bfffa', '#ff61f6'];\nfunction lerp(a, b, t) {\n  return a + (b - a) * t;\n}\nconst ChatBubble = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [isHovered, setIsHovered] = useState(false);\n  useEffect(() => {\n    let animationId;\n    let t = 0;\n    const draw = () => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      const ctx = canvas.getContext('2d');\n      if (!ctx) return;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.save();\n      ctx.translate(canvas.width / 2, canvas.height / 2);\n      for (let l = 0; l < NUM_LINES; l++) {\n        ctx.beginPath();\n        for (let i = 0; i <= POINTS_PER_LINE; i++) {\n          const angle = Math.PI * 2 * i / POINTS_PER_LINE;\n          // Organic morphing using sine waves\n          const noise = Math.sin(angle * (2 + l * 0.2) + t * (0.8 + l * 0.07)) * lerp(6, 16, Math.abs(Math.sin(t * 0.3 + l)));\n          const r = RADIUS + noise + Math.sin(t * 0.7 + l) * 2;\n          const x = Math.cos(angle) * r;\n          const y = Math.sin(angle) * r;\n          if (i === 0) ctx.moveTo(x, y);else ctx.lineTo(x, y);\n        }\n        ctx.closePath();\n        ctx.shadowColor = COLORS[l % COLORS.length];\n        ctx.shadowBlur = 16;\n        ctx.strokeStyle = COLORS[l % COLORS.length];\n        ctx.globalAlpha = 0.7;\n        ctx.lineWidth = 2.2 + Math.sin(t * 0.5 + l) * 0.7;\n        ctx.stroke();\n      }\n      ctx.restore();\n      t += 0.018;\n      animationId = requestAnimationFrame(draw);\n    };\n    draw();\n    return () => cancelAnimationFrame(animationId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-bubble-container\",\n    onMouseEnter: () => setIsHovered(true),\n    onMouseLeave: () => setIsHovered(false),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-bubble\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 80,\n        height: 80,\n        className: \"plasma-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), isHovered && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: botIcon,\n        alt: \"AI Bot\",\n        className: \"bot-gif\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBubble, \"9NTkVBTitk1oZwP0vELY/S9VqLk=\");\n_c = ChatBubble;\nexport default ChatBubble;\nvar _c;\n$RefreshReg$(_c, \"ChatBubble\");","map":{"version":3,"names":["React","useEffect","useRef","useState","botIcon","jsxDEV","_jsxDEV","NUM_LINES","POINTS_PER_LINE","RADIUS","COLORS","lerp","a","b","t","ChatBubble","_s","canvasRef","isHovered","setIsHovered","animationId","draw","canvas","current","ctx","getContext","clearRect","width","height","save","translate","l","beginPath","i","angle","Math","PI","noise","sin","abs","r","x","cos","y","moveTo","lineTo","closePath","shadowColor","length","shadowBlur","strokeStyle","globalAlpha","lineWidth","stroke","restore","requestAnimationFrame","cancelAnimationFrame","className","onMouseEnter","onMouseLeave","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["C:/Projects/chat_bot/src/components/ChatBubble/ChatBubble.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './ChatBubble.css';\r\nimport botIcon from '../../assets/bot_icon.gif';\r\n\r\nconst NUM_LINES = 8;\r\nconst POINTS_PER_LINE = 80;\r\nconst RADIUS = 36;\r\nconst COLORS = [\r\n  '#00fff7', '#00c3ff', '#a259ff', '#ff3cac', '#ffb6ff', '#00f0ff', '#7bfffa', '#ff61f6'\r\n];\r\n\r\nfunction lerp(a: number, b: number, t: number) {\r\n  return a + (b - a) * t;\r\n}\r\n\r\nconst ChatBubble: React.FC = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let animationId: number;\r\n    let t = 0;\r\n    const draw = () => {\r\n      const canvas = canvasRef.current;\r\n      if (!canvas) return;\r\n      const ctx = canvas.getContext('2d');\r\n      if (!ctx) return;\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      ctx.save();\r\n      ctx.translate(canvas.width / 2, canvas.height / 2);\r\n      for (let l = 0; l < NUM_LINES; l++) {\r\n        ctx.beginPath();\r\n        for (let i = 0; i <= POINTS_PER_LINE; i++) {\r\n          const angle = (Math.PI * 2 * i) / POINTS_PER_LINE;\r\n          // Organic morphing using sine waves\r\n          const noise = Math.sin(angle * (2 + l * 0.2) + t * (0.8 + l * 0.07)) * lerp(6, 16, Math.abs(Math.sin(t * 0.3 + l)));\r\n          const r = RADIUS + noise + Math.sin(t * 0.7 + l) * 2;\r\n          const x = Math.cos(angle) * r;\r\n          const y = Math.sin(angle) * r;\r\n          if (i === 0) ctx.moveTo(x, y);\r\n          else ctx.lineTo(x, y);\r\n        }\r\n        ctx.closePath();\r\n        ctx.shadowColor = COLORS[l % COLORS.length];\r\n        ctx.shadowBlur = 16;\r\n        ctx.strokeStyle = COLORS[l % COLORS.length];\r\n        ctx.globalAlpha = 0.7;\r\n        ctx.lineWidth = 2.2 + Math.sin(t * 0.5 + l) * 0.7;\r\n        ctx.stroke();\r\n      }\r\n      ctx.restore();\r\n      t += 0.018;\r\n      animationId = requestAnimationFrame(draw);\r\n    };\r\n    draw();\r\n    return () => cancelAnimationFrame(animationId);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"chat-bubble-container\"\r\n      onMouseEnter={() => setIsHovered(true)}\r\n      onMouseLeave={() => setIsHovered(false)}\r\n    >\r\n      <div className=\"chat-bubble\">\r\n        <canvas\r\n          ref={canvasRef}\r\n          width={80}\r\n          height={80}\r\n          className=\"plasma-canvas\"\r\n        />\r\n        {isHovered && (\r\n          <img src={botIcon} alt=\"AI Bot\" className=\"bot-gif\" />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBubble; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}