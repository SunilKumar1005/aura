{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\chat_bot\\\\src\\\\components\\\\ChatBubble\\\\ChatBubble.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './ChatBubble.css';\nimport botIcon from '../../assets/bot_icon.gif';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BUBBLE_SIZE = 80;\nconst PLASMA_BLOBS = 5;\nconst PLASMA_COLORS = ['rgba(0,255,255,0.25)', 'rgba(162,89,255,0.22)', 'rgba(255,0,255,0.18)', 'rgba(0,255,247,0.18)', 'rgba(255,97,246,0.15)'];\nfunction lerp(a, b, t) {\n  return a + (b - a) * t;\n}\nconst ChatBubble = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const [isHovered, setIsHovered] = useState(false);\n  const [pointer, setPointer] = useState(null);\n\n  // Animate floating plasma blobs\n  useEffect(() => {\n    let animationId;\n    let t = 0;\n    // Each blob has its own phase and speed\n    const phases = Array.from({\n      length: PLASMA_BLOBS\n    }, (_, i) => Math.random() * 1000);\n    const speeds = Array.from({\n      length: PLASMA_BLOBS\n    }, (_, i) => 0.7 + Math.random() * 0.7);\n    const radii = Array.from({\n      length: PLASMA_BLOBS\n    }, (_, i) => 16 + Math.random() * 12);\n    const draw = () => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      const ctx = canvas.getContext('2d');\n      if (!ctx) return;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      for (let i = 0; i < PLASMA_BLOBS; i++) {\n        // Center of the blob floats in a circle, but is attracted to pointer if close\n        let cx = BUBBLE_SIZE / 2 + Math.sin(t * speeds[i] + phases[i]) * 16 + Math.cos(t * 0.7 + i) * 8;\n        let cy = BUBBLE_SIZE / 2 + Math.cos(t * speeds[i] + phases[i]) * 16 + Math.sin(t * 0.9 + i) * 8;\n        if (pointer && containerRef.current) {\n          // Get pointer relative to bubble center\n          const rect = containerRef.current.getBoundingClientRect();\n          const px = pointer.x - rect.left;\n          const py = pointer.y - rect.top;\n          // If pointer is inside bubble, attract blob center toward pointer\n          const dx = px - BUBBLE_SIZE / 2;\n          const dy = py - BUBBLE_SIZE / 2;\n          const dist = Math.sqrt(dx * dx + dy * dy);\n          if (dist < BUBBLE_SIZE / 1.2) {\n            cx = lerp(cx, px, 0.22);\n            cy = lerp(cy, py, 0.22);\n          }\n        }\n        // Animate organic radius\n        const r = radii[i] + Math.sin(t * 1.2 + i) * 4 + Math.cos(t * 0.7 + i) * 2;\n        // Draw organic plasma blob\n        ctx.save();\n        ctx.globalAlpha = 0.7;\n        ctx.beginPath();\n        for (let a = 0; a <= Math.PI * 2 + 0.1; a += Math.PI / 24) {\n          // Organic edge\n          const edge = r + Math.sin(a * 3 + t * 1.5 + i) * 3 + Math.cos(a * 2.2 + t * 0.7 + i) * 2;\n          const x = cx + Math.cos(a) * edge;\n          const y = cy + Math.sin(a) * edge;\n          if (a === 0) ctx.moveTo(x, y);else ctx.lineTo(x, y);\n        }\n        ctx.closePath();\n        ctx.fillStyle = PLASMA_COLORS[i % PLASMA_COLORS.length];\n        ctx.shadowColor = PLASMA_COLORS[i % PLASMA_COLORS.length];\n        ctx.shadowBlur = 16;\n        ctx.fill();\n        ctx.restore();\n      }\n      t += 0.018;\n      animationId = requestAnimationFrame(draw);\n    };\n    draw();\n    return () => cancelAnimationFrame(animationId);\n  }, [pointer]);\n\n  // Mouse move tracking for pointer attraction\n  useEffect(() => {\n    const handleMove = e => {\n      setPointer({\n        x: e.clientX,\n        y: e.clientY\n      });\n    };\n    const handleLeave = () => setPointer(null);\n    window.addEventListener('mousemove', handleMove);\n    window.addEventListener('mouseout', handleLeave);\n    return () => {\n      window.removeEventListener('mousemove', handleMove);\n      window.removeEventListener('mouseout', handleLeave);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-bubble-container\",\n    ref: containerRef,\n    onMouseEnter: () => setIsHovered(true),\n    onMouseLeave: () => setIsHovered(false),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-bubble\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plasma-orb\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plasma-core\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plasma-glow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plasma-trail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          width: BUBBLE_SIZE,\n          height: BUBBLE_SIZE,\n          className: \"plasma-blobs-canvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), isHovered && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: botIcon,\n          alt: \"AI Bot\",\n          className: \"bot-gif-full\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBubble, \"lE+VxsObN4wYEp+H80A/LEnIenY=\");\n_c = ChatBubble;\nexport default ChatBubble;\nvar _c;\n$RefreshReg$(_c, \"ChatBubble\");","map":{"version":3,"names":["React","useEffect","useRef","useState","botIcon","jsxDEV","_jsxDEV","BUBBLE_SIZE","PLASMA_BLOBS","PLASMA_COLORS","lerp","a","b","t","ChatBubble","_s","canvasRef","containerRef","isHovered","setIsHovered","pointer","setPointer","animationId","phases","Array","from","length","_","i","Math","random","speeds","radii","draw","canvas","current","ctx","getContext","clearRect","width","height","cx","sin","cos","cy","rect","getBoundingClientRect","px","x","left","py","y","top","dx","dy","dist","sqrt","r","save","globalAlpha","beginPath","PI","edge","moveTo","lineTo","closePath","fillStyle","shadowColor","shadowBlur","fill","restore","requestAnimationFrame","cancelAnimationFrame","handleMove","e","clientX","clientY","handleLeave","window","addEventListener","removeEventListener","className","ref","onMouseEnter","onMouseLeave","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["C:/Projects/chat_bot/src/components/ChatBubble/ChatBubble.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './ChatBubble.css';\r\nimport botIcon from '../../assets/bot_icon.gif';\r\n\r\nconst BUBBLE_SIZE = 80;\r\nconst PLASMA_BLOBS = 5;\r\nconst PLASMA_COLORS = [\r\n  'rgba(0,255,255,0.25)',\r\n  'rgba(162,89,255,0.22)',\r\n  'rgba(255,0,255,0.18)',\r\n  'rgba(0,255,247,0.18)',\r\n  'rgba(255,97,246,0.15)'\r\n];\r\n\r\nfunction lerp(a: number, b: number, t: number) {\r\n  return a + (b - a) * t;\r\n}\r\n\r\nconst ChatBubble: React.FC = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [pointer, setPointer] = useState<{x: number, y: number} | null>(null);\r\n\r\n  // Animate floating plasma blobs\r\n  useEffect(() => {\r\n    let animationId: number;\r\n    let t = 0;\r\n    // Each blob has its own phase and speed\r\n    const phases = Array.from({length: PLASMA_BLOBS}, (_, i) => Math.random() * 1000);\r\n    const speeds = Array.from({length: PLASMA_BLOBS}, (_, i) => 0.7 + Math.random() * 0.7);\r\n    const radii = Array.from({length: PLASMA_BLOBS}, (_, i) => 16 + Math.random() * 12);\r\n    const draw = () => {\r\n      const canvas = canvasRef.current;\r\n      if (!canvas) return;\r\n      const ctx = canvas.getContext('2d');\r\n      if (!ctx) return;\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      for (let i = 0; i < PLASMA_BLOBS; i++) {\r\n        // Center of the blob floats in a circle, but is attracted to pointer if close\r\n        let cx = BUBBLE_SIZE/2 + Math.sin(t * speeds[i] + phases[i]) * 16 + Math.cos(t * 0.7 + i) * 8;\r\n        let cy = BUBBLE_SIZE/2 + Math.cos(t * speeds[i] + phases[i]) * 16 + Math.sin(t * 0.9 + i) * 8;\r\n        if (pointer && containerRef.current) {\r\n          // Get pointer relative to bubble center\r\n          const rect = containerRef.current.getBoundingClientRect();\r\n          const px = pointer.x - rect.left;\r\n          const py = pointer.y - rect.top;\r\n          // If pointer is inside bubble, attract blob center toward pointer\r\n          const dx = px - BUBBLE_SIZE/2;\r\n          const dy = py - BUBBLE_SIZE/2;\r\n          const dist = Math.sqrt(dx*dx + dy*dy);\r\n          if (dist < BUBBLE_SIZE/1.2) {\r\n            cx = lerp(cx, px, 0.22);\r\n            cy = lerp(cy, py, 0.22);\r\n          }\r\n        }\r\n        // Animate organic radius\r\n        const r = radii[i] + Math.sin(t * 1.2 + i) * 4 + Math.cos(t * 0.7 + i) * 2;\r\n        // Draw organic plasma blob\r\n        ctx.save();\r\n        ctx.globalAlpha = 0.7;\r\n        ctx.beginPath();\r\n        for (let a = 0; a <= Math.PI * 2 + 0.1; a += Math.PI/24) {\r\n          // Organic edge\r\n          const edge = r + Math.sin(a * 3 + t * 1.5 + i) * 3 + Math.cos(a * 2.2 + t * 0.7 + i) * 2;\r\n          const x = cx + Math.cos(a) * edge;\r\n          const y = cy + Math.sin(a) * edge;\r\n          if (a === 0) ctx.moveTo(x, y);\r\n          else ctx.lineTo(x, y);\r\n        }\r\n        ctx.closePath();\r\n        ctx.fillStyle = PLASMA_COLORS[i % PLASMA_COLORS.length];\r\n        ctx.shadowColor = PLASMA_COLORS[i % PLASMA_COLORS.length];\r\n        ctx.shadowBlur = 16;\r\n        ctx.fill();\r\n        ctx.restore();\r\n      }\r\n      t += 0.018;\r\n      animationId = requestAnimationFrame(draw);\r\n    };\r\n    draw();\r\n    return () => cancelAnimationFrame(animationId);\r\n  }, [pointer]);\r\n\r\n  // Mouse move tracking for pointer attraction\r\n  useEffect(() => {\r\n    const handleMove = (e: MouseEvent) => {\r\n      setPointer({ x: e.clientX, y: e.clientY });\r\n    };\r\n    const handleLeave = () => setPointer(null);\r\n    window.addEventListener('mousemove', handleMove);\r\n    window.addEventListener('mouseout', handleLeave);\r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMove);\r\n      window.removeEventListener('mouseout', handleLeave);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"chat-bubble-container\"\r\n      ref={containerRef}\r\n      onMouseEnter={() => setIsHovered(true)}\r\n      onMouseLeave={() => setIsHovered(false)}\r\n    >\r\n      <div className=\"chat-bubble\">\r\n        {/* CSS-based plasma orb */}\r\n        <div className=\"plasma-orb\">\r\n          <div className=\"plasma-core\"></div>\r\n          <div className=\"plasma-glow\"></div>\r\n          <div className=\"plasma-trail\"></div>\r\n          {/* Canvas for floating plasma blobs */}\r\n          <canvas\r\n            ref={canvasRef}\r\n            width={BUBBLE_SIZE}\r\n            height={BUBBLE_SIZE}\r\n            className=\"plasma-blobs-canvas\"\r\n          />\r\n          {/* On hover, show the GIF covering the orb */}\r\n          {isHovered && (\r\n            <img src={botIcon} alt=\"AI Bot\" className=\"bot-gif-full\" />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBubble; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}