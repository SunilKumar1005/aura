{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\chat_bot\\\\src\\\\components\\\\ChatBotUI\\\\ChatBotUI.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatBotUI.css';\nimport botIcon from '../../assets/bot_icon.gif';\nimport SmartHelpBar from './SmartHelpBar';\nimport ChatMessage from './ChatMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HEADER_CYCLE_TEXTS = ['Instant help.', 'Smarter workflows.', 'Just Ask Aura.'];\nconst GENIE_ANIMATION_DURATION = 700; // ms\n\nconst WELCOME_MESSAGE = `👋 Hi, I'm Aura, your AI assistant to help with any query!\\nYou can select a specific issue from the options above ☝️\\nor simply type your question below to get started.`;\nconst ChatBotUI = ({\n  open,\n  onClose\n}) => {\n  _s();\n  const [headerIndex, setHeaderIndex] = useState(0);\n  const [headerFade, setHeaderFade] = useState(true);\n  const [genieState, setGenieState] = useState('closed');\n  const closeTimeoutRef = useRef(null);\n  const [inputValue, setInputValue] = useState('');\n  const inputRef = useRef(null);\n  const [messages, setMessages] = useState([]);\n  const [showWelcome, setShowWelcome] = useState(true);\n  const endOfMessagesRef = useRef(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const messagesContainerRef = useRef(null);\n\n  // Cycle header texts\n  useEffect(() => {\n    if (!open) return;\n    const interval = setInterval(() => {\n      setHeaderFade(false);\n      setTimeout(() => {\n        setHeaderIndex(prev => (prev + 1) % HEADER_CYCLE_TEXTS.length);\n        setHeaderFade(true);\n      }, 350);\n    }, 1800);\n    return () => clearInterval(interval);\n  }, [open]);\n\n  // Prevent scroll on body when open\n  useEffect(() => {\n    if (open) document.body.style.overflow = 'hidden';else document.body.style.overflow = '';\n    return () => {\n      document.body.style.overflow = '';\n    };\n  }, [open]);\n\n  // Genie animation state logic\n  useEffect(() => {\n    if (open) {\n      setGenieState('opening');\n      const timer = setTimeout(() => setGenieState('open'), GENIE_ANIMATION_DURATION);\n      return () => clearTimeout(timer);\n    } else if (!open && genieState !== 'closed') {\n      setGenieState('closing');\n      closeTimeoutRef.current = setTimeout(() => setGenieState('closed'), GENIE_ANIMATION_DURATION);\n      return () => {\n        if (closeTimeoutRef.current) clearTimeout(closeTimeoutRef.current);\n      };\n    }\n  }, [open]);\n\n  // Custom close handler to play animation before calling parent's onClose\n  const handleClose = () => {\n    setGenieState('closing');\n    closeTimeoutRef.current = setTimeout(() => {\n      setGenieState('closed');\n      onClose();\n    }, GENIE_ANIMATION_DURATION);\n  };\n\n  // Map help bar option IDs to full sentences\n  const HELP_OPTION_TO_SENTENCE = {\n    'case-status': 'I need help with an active case',\n    'completed-cases': 'I need help with completed cases',\n    'callback': 'I want to request a callback',\n    'doctor': 'I want to talk to a radiologist',\n    'technical': 'I am facing a technical issue',\n    'finance': 'I have a finance query',\n    'feedback': 'I want to give feedback',\n    'refer': 'I want to refer to 5C'\n  };\n\n  // Accept the full option object from SmartHelpBar\n  const handleHelpOptionSelect = option => {\n    const fullSentence = HELP_OPTION_TO_SENTENCE[option.id] || option.label || option.id;\n    setShowWelcome(false);\n    setInputValue(fullSentence);\n    handleSend(fullSentence);\n  };\n  const handleSend = async overrideInput => {\n    const messageToSend = (overrideInput !== undefined ? overrideInput : inputValue).trim();\n    if (!messageToSend || isStreaming) return;\n    setShowWelcome(false);\n    setIsStreaming(true);\n    // Add user message\n    setMessages(prev => [...prev, {\n      type: 'user',\n      content: messageToSend,\n      isNew: true\n    }]);\n    // Add loading bot message (empty content)\n    setMessages(prev => [...prev, {\n      type: 'bot',\n      content: '',\n      isLoading: true,\n      isNew: true\n    }]);\n    setInputValue('');\n    if (inputRef.current) {\n      inputRef.current.style.height = '36px'; // Reset textarea height\n    }\n    let streamError = false;\n    try {\n      const response = await fetch('http://localhost:8000/chat/stream', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: \"demo_user\",\n          client_id: 3866,\n          message: messageToSend\n        })\n      });\n      if (!response.body) throw new Error('No response body');\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let done = false;\n      let fullText = '';\n      while (!done) {\n        const {\n          value,\n          done: doneReading\n        } = await reader.read();\n        done = doneReading;\n        if (value) {\n          const chunk = decoder.decode(value, {\n            stream: true\n          });\n          fullText += chunk;\n          setMessages(prev => {\n            const newMessages = [...prev];\n            const lastIdx = newMessages.length - 1;\n            if (newMessages[lastIdx].type === 'bot') {\n              newMessages[lastIdx] = {\n                ...newMessages[lastIdx],\n                content: fullText,\n                isLoading: !done\n              };\n            }\n            return newMessages;\n          });\n        }\n      }\n    } catch (error) {\n      streamError = true;\n      console.error('Error sending message:', error);\n      setMessages(prev => {\n        const newMessages = [...prev];\n        const lastIdx = newMessages.length - 1;\n        if (newMessages[lastIdx].type === 'bot') {\n          newMessages[lastIdx] = {\n            ...newMessages[lastIdx],\n            content: 'Sorry, I encountered an error. Please try again.',\n            isLoading: false\n          };\n        }\n        return newMessages;\n      });\n    } finally {\n      setIsStreaming(false);\n      setMessages(prev => {\n        const newMessages = [...prev];\n        const lastIdx = newMessages.length - 1;\n        if (newMessages[lastIdx].type === 'bot') {\n          newMessages[lastIdx] = {\n            ...newMessages[lastIdx],\n            isLoading: false\n          };\n        }\n        return newMessages;\n      });\n    }\n  };\n  useEffect(() => {\n    if (endOfMessagesRef.current) {\n      endOfMessagesRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]);\n\n  // Load chat history from localStorage on mount\n  useEffect(() => {\n    const saved = localStorage.getItem('chatbot_messages');\n    if (saved) {\n      try {\n        const parsed = JSON.parse(saved);\n        if (Array.isArray(parsed)) setMessages(parsed);\n      } catch {}\n    }\n  }, []);\n\n  // Save chat history to localStorage on every update\n  useEffect(() => {\n    localStorage.setItem('chatbot_messages', JSON.stringify(messages));\n  }, [messages]);\n\n  // Always scroll to last message when chat UI is opened\n  useEffect(() => {\n    if (open && messagesContainerRef.current && messages.length > 0) {\n      setTimeout(() => {\n        messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;\n      }, 80);\n    }\n  }, [open, messages.length]);\n\n  // If closed, don't render the window at all\n  let genieClass = 'genie-anim';\n  if (genieState === 'opening') genieClass += ' genie-open';else if (genieState === 'open') genieClass += ' genie-open';else if (genieState === 'closing') genieClass += ' genie-close';\n  if (genieState === 'closed') return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot-ui-backdrop${open ? ' open' : ''}`,\n    onClick: handleClose,\n    tabIndex: -1,\n    style: {\n      pointerEvents: open ? 'auto' : 'none',\n      zIndex: open ? 4000 : -1 // Higher than bubble\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chatbot-ui-window ${genieClass}`,\n      onClick: e => e.stopPropagation(),\n      tabIndex: 0,\n      style: {\n        pointerEvents: open ? 'auto' : 'none',\n        zIndex: open ? 4001 : -1 // Higher than bubble\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-ui-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: botIcon,\n          alt: \"Bot\",\n          style: {\n            width: 36,\n            height: 36,\n            borderRadius: '50%',\n            marginRight: 10,\n            background: 'rgba(255,255,255,0.18)'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chatbot-ui-title\",\n          children: \"5C Aura AI Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `chatbot-ui-header-cycle${headerFade ? ' fade-in' : ' fade-out'}`,\n          children: HEADER_CYCLE_TEXTS[headerIndex]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chatbot-ui-close\",\n          onClick: handleClose,\n          \"aria-label\": \"Close\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SmartHelpBar, {\n        onOptionSelect: handleHelpOptionSelect,\n        isUserTyping: inputValue.length > 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-ui-messages\",\n        ref: messagesContainerRef,\n        children: [showWelcome && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatbot-welcome-msg fade-float-in\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"welcome-ai-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: botIcon,\n              alt: \"AI Assistant\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"welcome-ai-text\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"welcome-title\",\n              children: \"\\uD83D\\uDC4B Hi, I'm Aura\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"welcome-desc\",\n              children: [\"Your AI assistant to help with any query.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 60\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"welcome-highlight\",\n                children: \"Select an option above or type your question below to get started.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this), messages.map((msg, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          type: msg.type,\n          content: msg.content,\n          isLoading: msg.isLoading,\n          isNew: msg.isNew,\n          onLoadComplete: () => {\n            if (msg.type === 'bot' && msg.isLoading) {\n              setMessages(prev => {\n                const newMessages = [...prev];\n                newMessages[index] = {\n                  ...msg,\n                  isLoading: false\n                };\n                return newMessages;\n              });\n            }\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: endOfMessagesRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-ui-input-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"chatbot-ui-input\",\n          placeholder: \"Type your message...\",\n          value: inputValue,\n          ref: inputRef,\n          onChange: e => {\n            if (e.target.value.length <= 1000) setInputValue(e.target.value);\n            if (inputRef.current) {\n              inputRef.current.style.height = 'auto';\n              inputRef.current.style.height = Math.min(inputRef.current.scrollHeight, 120) + 'px';\n            }\n          },\n          onKeyDown: e => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n              e.preventDefault();\n              handleSend();\n            }\n          },\n          maxLength: 3000,\n          rows: 1,\n          style: {\n            resize: 'none',\n            minHeight: '36px',\n            maxHeight: '120px',\n            overflowY: 'auto',\n            width: '100%',\n            fontFamily: 'inherit',\n            fontSize: '0.97rem',\n            color: 'hsl(219, 36%, 36%)',\n            background: isStreaming ? '#f3f3f3' : 'transparent',\n            border: isStreaming ? '1.5px solid #d1d5db' : 'none',\n            opacity: isStreaming ? 0.6 : 1,\n            cursor: isStreaming ? 'not-allowed' : 'auto',\n            outline: 'none',\n            boxSizing: 'border-box'\n          },\n          disabled: isStreaming\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chatbot-ui-send\",\n          onClick: () => handleSend(),\n          disabled: isStreaming,\n          style: {\n            opacity: isStreaming ? 0.5 : 1,\n            cursor: isStreaming ? 'not-allowed' : 'pointer'\n          },\n          children: \"\\u27A4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBotUI, \"k1EtXx81/dbsdv4GCSVdO+s9XhQ=\");\n_c = ChatBotUI;\nexport default ChatBotUI;\nvar _c;\n$RefreshReg$(_c, \"ChatBotUI\");","map":{"version":3,"names":["React","useState","useEffect","useRef","botIcon","SmartHelpBar","ChatMessage","jsxDEV","_jsxDEV","HEADER_CYCLE_TEXTS","GENIE_ANIMATION_DURATION","WELCOME_MESSAGE","ChatBotUI","open","onClose","_s","headerIndex","setHeaderIndex","headerFade","setHeaderFade","genieState","setGenieState","closeTimeoutRef","inputValue","setInputValue","inputRef","messages","setMessages","showWelcome","setShowWelcome","endOfMessagesRef","isStreaming","setIsStreaming","messagesContainerRef","interval","setInterval","setTimeout","prev","length","clearInterval","document","body","style","overflow","timer","clearTimeout","current","handleClose","HELP_OPTION_TO_SENTENCE","handleHelpOptionSelect","option","fullSentence","id","label","handleSend","overrideInput","messageToSend","undefined","trim","type","content","isNew","isLoading","height","streamError","response","fetch","method","headers","JSON","stringify","user_id","client_id","message","Error","reader","getReader","decoder","TextDecoder","done","fullText","value","doneReading","read","chunk","decode","stream","newMessages","lastIdx","error","console","scrollIntoView","behavior","saved","localStorage","getItem","parsed","parse","Array","isArray","setItem","scrollTop","scrollHeight","genieClass","className","onClick","tabIndex","pointerEvents","zIndex","children","e","stopPropagation","src","alt","width","borderRadius","marginRight","background","fileName","_jsxFileName","lineNumber","columnNumber","onOptionSelect","isUserTyping","ref","map","msg","index","onLoadComplete","placeholder","onChange","target","Math","min","onKeyDown","key","shiftKey","preventDefault","maxLength","rows","resize","minHeight","maxHeight","overflowY","fontFamily","fontSize","color","border","opacity","cursor","outline","boxSizing","disabled","_c","$RefreshReg$"],"sources":["C:/Projects/chat_bot/src/components/ChatBotUI/ChatBotUI.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './ChatBotUI.css';\r\nimport botIcon from '../../assets/bot_icon.gif';\r\nimport SmartHelpBar from './SmartHelpBar';\r\nimport ChatMessage from './ChatMessage';\r\n\r\nconst HEADER_CYCLE_TEXTS = [\r\n  'Instant help.',\r\n  'Smarter workflows.',\r\n  'Just Ask Aura.'\r\n];\r\n\r\nconst GENIE_ANIMATION_DURATION = 700; // ms\r\n\r\nconst WELCOME_MESSAGE = `👋 Hi, I'm Aura, your AI assistant to help with any query!\\nYou can select a specific issue from the options above ☝️\\nor simply type your question below to get started.`;\r\n\r\ninterface Message {\r\n  type: 'user' | 'bot';\r\n  content: string;\r\n  isLoading?: boolean;\r\n  isNew?: boolean;\r\n}\r\n\r\nconst ChatBotUI: React.FC<{\r\n  open: boolean;\r\n  onClose: () => void;\r\n}> = ({ open, onClose }) => {\r\n  const [headerIndex, setHeaderIndex] = useState(0);\r\n  const [headerFade, setHeaderFade] = useState(true);\r\n  const [genieState, setGenieState] = useState<'closed' | 'opening' | 'open' | 'closing'>('closed');\r\n  const closeTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const inputRef = useRef<HTMLTextAreaElement>(null);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [showWelcome, setShowWelcome] = useState(true);\r\n  const endOfMessagesRef = useRef<HTMLDivElement>(null);\r\n  const [isStreaming, setIsStreaming] = useState(false);\r\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Cycle header texts\r\n  useEffect(() => {\r\n    if (!open) return;\r\n    const interval = setInterval(() => {\r\n      setHeaderFade(false);\r\n      setTimeout(() => {\r\n        setHeaderIndex((prev) => (prev + 1) % HEADER_CYCLE_TEXTS.length);\r\n        setHeaderFade(true);\r\n      }, 350);\r\n    }, 1800);\r\n    return () => clearInterval(interval);\r\n  }, [open]);\r\n\r\n  // Prevent scroll on body when open\r\n  useEffect(() => {\r\n    if (open) document.body.style.overflow = 'hidden';\r\n    else document.body.style.overflow = '';\r\n    return () => { document.body.style.overflow = ''; };\r\n  }, [open]);\r\n\r\n  // Genie animation state logic\r\n  useEffect(() => {\r\n    if (open) {\r\n      setGenieState('opening');\r\n      const timer = setTimeout(() => setGenieState('open'), GENIE_ANIMATION_DURATION);\r\n      return () => clearTimeout(timer);\r\n    } else if (!open && genieState !== 'closed') {\r\n      setGenieState('closing');\r\n      closeTimeoutRef.current = setTimeout(() => setGenieState('closed'), GENIE_ANIMATION_DURATION);\r\n      return () => {\r\n        if (closeTimeoutRef.current) clearTimeout(closeTimeoutRef.current);\r\n      };\r\n    }\r\n  }, [open]);\r\n\r\n  // Custom close handler to play animation before calling parent's onClose\r\n  const handleClose = () => {\r\n    setGenieState('closing');\r\n    closeTimeoutRef.current = setTimeout(() => {\r\n      setGenieState('closed');\r\n      onClose();\r\n    }, GENIE_ANIMATION_DURATION);\r\n  };\r\n\r\n  // Map help bar option IDs to full sentences\r\n  const HELP_OPTION_TO_SENTENCE: Record<string, string> = {\r\n    'case-status': 'I need help with an active case',\r\n    'completed-cases': 'I need help with completed cases',\r\n    'callback': 'I want to request a callback',\r\n    'doctor': 'I want to talk to a radiologist',\r\n    'technical': 'I am facing a technical issue',\r\n    'finance': 'I have a finance query',\r\n    'feedback': 'I want to give feedback',\r\n    'refer': 'I want to refer to 5C',\r\n  };\r\n\r\n  // Accept the full option object from SmartHelpBar\r\n  const handleHelpOptionSelect = (option: { id: string, label: string }) => {\r\n    const fullSentence = HELP_OPTION_TO_SENTENCE[option.id] || option.label || option.id;\r\n    setShowWelcome(false);\r\n    setInputValue(fullSentence);\r\n    handleSend(fullSentence);\r\n  };\r\n\r\n  const handleSend = async (overrideInput?: string) => {\r\n    const messageToSend = (overrideInput !== undefined ? overrideInput : inputValue).trim();\r\n    if (!messageToSend || isStreaming) return;\r\n    setShowWelcome(false);\r\n    setIsStreaming(true);\r\n    // Add user message\r\n    setMessages(prev => [...prev, { \r\n      type: 'user', \r\n      content: messageToSend,\r\n      isNew: true\r\n    }]);\r\n    // Add loading bot message (empty content)\r\n    setMessages(prev => [...prev, { \r\n      type: 'bot', \r\n      content: '',\r\n      isLoading: true,\r\n      isNew: true\r\n    }]);\r\n    setInputValue('');\r\n    if (inputRef.current) {\r\n      inputRef.current.style.height = '36px'; // Reset textarea height\r\n    }\r\n    let streamError = false;\r\n    try {\r\n      const response = await fetch('http://localhost:8000/chat/stream', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          user_id: \"demo_user\",\r\n          client_id: 3866,\r\n          message: messageToSend\r\n        })\r\n      });\r\n      if (!response.body) throw new Error('No response body');\r\n      const reader = response.body.getReader();\r\n      const decoder = new TextDecoder();\r\n      let done = false;\r\n      let fullText = '';\r\n      while (!done) {\r\n        const { value, done: doneReading } = await reader.read();\r\n        done = doneReading;\r\n        if (value) {\r\n          const chunk = decoder.decode(value, { stream: true });\r\n          fullText += chunk;\r\n          setMessages(prev => {\r\n            const newMessages = [...prev];\r\n            const lastIdx = newMessages.length - 1;\r\n            if (newMessages[lastIdx].type === 'bot') {\r\n              newMessages[lastIdx] = {\r\n                ...newMessages[lastIdx],\r\n                content: fullText,\r\n                isLoading: !done\r\n              };\r\n            }\r\n            return newMessages;\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      streamError = true;\r\n      console.error('Error sending message:', error);\r\n      setMessages(prev => {\r\n        const newMessages = [...prev];\r\n        const lastIdx = newMessages.length - 1;\r\n        if (newMessages[lastIdx].type === 'bot') {\r\n          newMessages[lastIdx] = {\r\n            ...newMessages[lastIdx],\r\n            content: 'Sorry, I encountered an error. Please try again.',\r\n            isLoading: false\r\n          };\r\n        }\r\n        return newMessages;\r\n      });\r\n    } finally {\r\n      setIsStreaming(false);\r\n      setMessages(prev => {\r\n        const newMessages = [...prev];\r\n        const lastIdx = newMessages.length - 1;\r\n        if (newMessages[lastIdx].type === 'bot') {\r\n          newMessages[lastIdx] = {\r\n            ...newMessages[lastIdx],\r\n            isLoading: false\r\n          };\r\n        }\r\n        return newMessages;\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (endOfMessagesRef.current) {\r\n      endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  // Load chat history from localStorage on mount\r\n  useEffect(() => {\r\n    const saved = localStorage.getItem('chatbot_messages');\r\n    if (saved) {\r\n      try {\r\n        const parsed = JSON.parse(saved);\r\n        if (Array.isArray(parsed)) setMessages(parsed);\r\n      } catch {}\r\n    }\r\n  }, []);\r\n\r\n  // Save chat history to localStorage on every update\r\n  useEffect(() => {\r\n    localStorage.setItem('chatbot_messages', JSON.stringify(messages));\r\n  }, [messages]);\r\n\r\n  // Always scroll to last message when chat UI is opened\r\n  useEffect(() => {\r\n    if (open && messagesContainerRef.current && messages.length > 0) {\r\n      setTimeout(() => {\r\n        messagesContainerRef.current!.scrollTop = messagesContainerRef.current!.scrollHeight;\r\n      }, 80);\r\n    }\r\n  }, [open, messages.length]);\r\n\r\n  // If closed, don't render the window at all\r\n  let genieClass = 'genie-anim';\r\n  if (genieState === 'opening') genieClass += ' genie-open';\r\n  else if (genieState === 'open') genieClass += ' genie-open';\r\n  else if (genieState === 'closing') genieClass += ' genie-close';\r\n  if (genieState === 'closed') return null;\r\n\r\n  return (\r\n    <div \r\n      className={`chatbot-ui-backdrop${open ? ' open' : ''}`}\r\n      onClick={handleClose}\r\n      tabIndex={-1}\r\n      style={{ \r\n        pointerEvents: open ? 'auto' : 'none',\r\n        zIndex: open ? 4000 : -1 // Higher than bubble\r\n      }}\r\n    >\r\n      <div\r\n        className={`chatbot-ui-window ${genieClass}`}\r\n        onClick={e => e.stopPropagation()}\r\n        tabIndex={0}\r\n        style={{\r\n          pointerEvents: open ? 'auto' : 'none',\r\n          zIndex: open ? 4001 : -1 // Higher than bubble\r\n        }}\r\n      >\r\n        <div className=\"chatbot-ui-header\">\r\n          <img src={botIcon} alt=\"Bot\" style={{ width: 36, height: 36, borderRadius: '50%', marginRight: 10, background: 'rgba(255,255,255,0.18)' }} />\r\n          <span className=\"chatbot-ui-title\">5C Aura AI Chatbot</span>\r\n          <span className={`chatbot-ui-header-cycle${headerFade ? ' fade-in' : ' fade-out'}`}>{HEADER_CYCLE_TEXTS[headerIndex]}</span>\r\n          <button className=\"chatbot-ui-close\" onClick={handleClose} aria-label=\"Close\">×</button>\r\n        </div>\r\n        \r\n        <SmartHelpBar \r\n          onOptionSelect={handleHelpOptionSelect}\r\n          isUserTyping={inputValue.length > 0}\r\n        />\r\n\r\n        <div className=\"chatbot-ui-messages\" ref={messagesContainerRef}>\r\n          {showWelcome && (\r\n            <div className=\"chatbot-welcome-msg fade-float-in\">\r\n              <div className=\"welcome-ai-icon\">\r\n                <img src={botIcon} alt=\"AI Assistant\" />\r\n              </div>\r\n              <div className=\"welcome-ai-text\">\r\n                <div className=\"welcome-title\">👋 Hi, I'm Aura</div>\r\n                <div className=\"welcome-desc\">\r\n                  Your AI assistant to help with any query.<br/>\r\n                  <span className=\"welcome-highlight\">Select an option above or type your question below to get started.</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {messages.map((msg, index) => (\r\n            <ChatMessage\r\n              key={index}\r\n              type={msg.type}\r\n              content={msg.content}\r\n              isLoading={msg.isLoading}\r\n              isNew={msg.isNew}\r\n              onLoadComplete={() => {\r\n                if (msg.type === 'bot' && msg.isLoading) {\r\n                  setMessages(prev => {\r\n                    const newMessages = [...prev];\r\n                    newMessages[index] = { ...msg, isLoading: false };\r\n                    return newMessages;\r\n                  });\r\n                }\r\n              }}\r\n            />\r\n          ))}\r\n          <div ref={endOfMessagesRef} />\r\n        </div>\r\n\r\n        <div className=\"chatbot-ui-input-row\">\r\n          <textarea\r\n            className=\"chatbot-ui-input\"\r\n            placeholder=\"Type your message...\"\r\n            value={inputValue}\r\n            ref={inputRef}\r\n            onChange={e => {\r\n              if (e.target.value.length <= 1000) setInputValue(e.target.value);\r\n              if (inputRef.current) {\r\n                inputRef.current.style.height = 'auto';\r\n                inputRef.current.style.height = Math.min(inputRef.current.scrollHeight, 120) + 'px';\r\n              }\r\n            }}\r\n            onKeyDown={e => {\r\n              if (e.key === 'Enter' && !e.shiftKey) {\r\n                e.preventDefault();\r\n                handleSend();\r\n              }\r\n            }}\r\n            maxLength={3000}\r\n            rows={1}\r\n            style={{\r\n              resize: 'none',\r\n              minHeight: '36px',\r\n              maxHeight: '120px',\r\n              overflowY: 'auto',\r\n              width: '100%',\r\n              fontFamily: 'inherit',\r\n              fontSize: '0.97rem',\r\n              color: 'hsl(219, 36%, 36%)',\r\n              background: isStreaming ? '#f3f3f3' : 'transparent',\r\n              border: isStreaming ? '1.5px solid #d1d5db' : 'none',\r\n              opacity: isStreaming ? 0.6 : 1,\r\n              cursor: isStreaming ? 'not-allowed' : 'auto',\r\n              outline: 'none',\r\n              boxSizing: 'border-box',\r\n            }}\r\n            disabled={isStreaming}\r\n          />\r\n          <button \r\n            className=\"chatbot-ui-send\"\r\n            onClick={() => handleSend()}\r\n            disabled={isStreaming}\r\n            style={{\r\n              opacity: isStreaming ? 0.5 : 1,\r\n              cursor: isStreaming ? 'not-allowed' : 'pointer',\r\n            }}\r\n          >\r\n            ➤\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBotUI; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}