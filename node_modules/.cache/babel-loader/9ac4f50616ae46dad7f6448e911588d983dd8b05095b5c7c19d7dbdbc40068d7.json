{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\chat_bot\\\\src\\\\components\\\\ChatBotUI\\\\ChatMessage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './ChatMessages.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingDots = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"loading-dots\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-dot\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-dot\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-dot\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 13,\n  columnNumber: 3\n}, this);\n_c = LoadingDots;\nconst ChatMessage = ({\n  type,\n  content,\n  isLoading = false,\n  onLoadComplete,\n  isNew = true\n}) => {\n  _s();\n  const [isVisible, setIsVisible] = useState(false);\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n  const renderContent = () => {\n    if (isLoading && isNew && type === 'bot') {\n      return /*#__PURE__*/_jsxDEV(LoadingDots, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 14\n      }, this);\n    }\n    // Always show full content for bot and user\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: content\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot-msg ${type} ${isLoading && isNew && type === 'bot' ? 'loading' : ''} ${isVisible ? 'visible' : ''}`,\n    style: {\n      opacity: isVisible ? 1 : 0\n    },\n    \"aria-label\": `${type === 'user' ? 'You' : 'AI Assistant'}`,\n    children: renderContent()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatMessage, \"J3yJOyGdBT4L7hs1p1XQYVGMdrY=\");\n_c2 = ChatMessage;\nexport default ChatMessage;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoadingDots\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","LoadingDots","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","ChatMessage","type","content","isLoading","onLoadComplete","isNew","_s","isVisible","setIsVisible","renderContent","dangerouslySetInnerHTML","__html","style","opacity","_c2","$RefreshReg$"],"sources":["C:/Projects/chat_bot/src/components/ChatBotUI/ChatMessage.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport './ChatMessages.css';\r\n\r\ninterface ChatMessageProps {\r\n  type: 'user' | 'bot';\r\n  content: string;\r\n  isLoading?: boolean;\r\n  onLoadComplete?: () => void;\r\n  isNew?: boolean;\r\n}\r\n\r\nconst LoadingDots: React.FC = () => (\r\n  <div className=\"loading-dots\">\r\n    <div className=\"loading-dot\" />\r\n    <div className=\"loading-dot\" />\r\n    <div className=\"loading-dot\" />\r\n  </div>\r\n);\r\n\r\nconst ChatMessage: React.FC<ChatMessageProps> = ({\r\n  type,\r\n  content,\r\n  isLoading = false,\r\n  onLoadComplete,\r\n  isNew = true\r\n}) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsVisible(true);\r\n  }, []);\r\n\r\n  const renderContent = () => {\r\n    if (isLoading && isNew && type === 'bot') {\r\n      return <LoadingDots />;\r\n    }\r\n    // Always show full content for bot and user\r\n    return (\r\n      <div\r\n        dangerouslySetInnerHTML={{\r\n          __html: content\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`chatbot-msg ${type} ${isLoading && isNew && type === 'bot' ? 'loading' : ''} ${isVisible ? 'visible' : ''}`}\r\n      style={{ opacity: isVisible ? 1 : 0 }}\r\n      aria-label={`${type === 'user' ? 'You' : 'AI Assistant'}`}\r\n    >\r\n      {renderContent()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatMessage; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAgB,OAAO;AAC1D,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAU5B,MAAMC,WAAqB,GAAGA,CAAA,kBAC5BD,OAAA;EAAKE,SAAS,EAAC,cAAc;EAAAC,QAAA,gBAC3BH,OAAA;IAAKE,SAAS,EAAC;EAAa;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eAC/BP,OAAA;IAAKE,SAAS,EAAC;EAAa;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eAC/BP,OAAA;IAAKE,SAAS,EAAC;EAAa;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAC5B,CACN;AAACC,EAAA,GANIP,WAAqB;AAQ3B,MAAMQ,WAAuC,GAAGA,CAAC;EAC/CC,IAAI;EACJC,OAAO;EACPC,SAAS,GAAG,KAAK;EACjBC,cAAc;EACdC,KAAK,GAAG;AACV,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAEjDD,SAAS,CAAC,MAAM;IACdoB,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIN,SAAS,IAAIE,KAAK,IAAIJ,IAAI,KAAK,KAAK,EAAE;MACxC,oBAAOV,OAAA,CAACC,WAAW;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACxB;IACA;IACA,oBACEP,OAAA;MACEmB,uBAAuB,EAAE;QACvBC,MAAM,EAAET;MACV;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEN,CAAC;EAED,oBACEP,OAAA;IACEE,SAAS,EAAE,eAAeQ,IAAI,IAAIE,SAAS,IAAIE,KAAK,IAAIJ,IAAI,KAAK,KAAK,GAAG,SAAS,GAAG,EAAE,IAAIM,SAAS,GAAG,SAAS,GAAG,EAAE,EAAG;IACxHK,KAAK,EAAE;MAAEC,OAAO,EAAEN,SAAS,GAAG,CAAC,GAAG;IAAE,CAAE;IACtC,cAAY,GAAGN,IAAI,KAAK,MAAM,GAAG,KAAK,GAAG,cAAc,EAAG;IAAAP,QAAA,EAEzDe,aAAa,CAAC;EAAC;IAAAd,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV,CAAC;AAACQ,EAAA,CApCIN,WAAuC;AAAAc,GAAA,GAAvCd,WAAuC;AAsC7C,eAAeA,WAAW;AAAC,IAAAD,EAAA,EAAAe,GAAA;AAAAC,YAAA,CAAAhB,EAAA;AAAAgB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}